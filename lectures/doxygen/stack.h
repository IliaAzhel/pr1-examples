/**
 * @file stack.h
 * @brief Интерфейс стека
 * @author Константин Чайка
 * @version 1.0
 * @date февраль 2018
 * @warning файл написан с целью демонстрации и может содержать ошибки
 * @see https://en.wikipedia.org/wiki/Stack_(abstract_data_type)
 *
 * Интерфейс структуры данных "стек", примерно который ожидается от студентов первого курса
 * весеннего семестра  при реализации второй рабораторной работы.
 * <br>Можно отметить, что интерфейс работы со стеком остается неизменным вне зависимости от реализации.
 */


/**
 * @brief Тип данных, хранящихся в стеке.
 *
 * Реализация стека не зависит от конкретного типа данных,
 * поэтому он может быть выбран в зависимости от решаемой задачи.
 */
typedef int type;

/**
 * @brief Структура, хранящая в себе представление стека
 *
 * Такой подход скрывает от пользователя реальную структуру стека.
 * Текущая реализация выполнена на основе массива, однако это может быть легко изменено.
 * @note При реализации на основе списка крайне рекомендуется завести отдельную структуру
 * для узла списка, а в структуре Stack хранить указатель на голову списка.
 */
struct Stack{
  type *array;     /**< Массив для хранения элементов стека. */
  size_t capacity; /**< Фактический размер массива Stack#array*/
  size_t size;     /**< Количество элементов хранящихся в массива (размер стека) */
};

/**
 * @brief Инициализирует стек

 * Функция, которая инициализирует структуру типа Stack для того,
 * что бы его можно было в дальнейшем использовать. Она устанавливает начальные значения
 * полей структуры. Стек после его инициализации пуст.<br>
 * Пример использования:
 * @code{.c}
 * struct Stack stack = initStack();
 * push(stack, 10);
 * @endcode
 * Следует учитывать, что использование стека без его инициализации
 * может привести к неопределенному поведению.
 * @return Структура, представляющая собой инициализированный пустой стек.
 */
struct Stack initStack();

/**
 * @brief Помещает элемент в стек
 *
 * Помещает элемент на вершину стека и сообщает удалось ли это сделать.
 * @param stack Структура, хранящая в себе представление стека.
 * @param elem Элемент, который надо поместить в стек, заданный @p stack.
 * @return 0 - если вставка прошла @b успешно и значение отличное от нуля в противном случае.
 * @note Вставка может завершиться ошибкой, если, например, не удалось выделить память.
 */
int push(struct Stack stack, type elem);

/**
 * @brief Извлекает элемент из стека
 *
 * Извлекает элемент из стека, возвращая его.
 * @param stack Структура, хранящая в себе представление стека.
 * @return Элемент на вершине стека.
 * @warning Функция не проверяет пуст ли стек и поэтому вызов pop при пустом стеке
 * может привести к аварийному завершению программы.
 */
type pop(struct Stack stack);

/**
 * @brief Возвращает элемент на вершине стека
 *
 * Возвращает элемент на вершине стека <b>не извлекая его</b>.
 * @param stack Структура, хранящая в себе представление стека.
 * @return Элемент на вершине стека.
 * @warning Функция не проверяет пуст ли стек и поэтому вызов pop при пустом стеке
 * может привести к аварийному завершению программы.
 */
type top(struct Stack stack);

/**
 * @brief Проверка на пустоту
 *
 * Проверяет, является ли стек пустым.
 * @param stack Структура, хранящая в себе представление стека.
 * @return @b 1, если стек пуст и @b 0 в противном случае.
 */
int isEmpty(struct Stack stack);

/**
 * @brief Возвращает размер стека
 *
 * Возвращает количество элементов фактически хранящихся в стеке.
 * @param stack Структура, хранящая в себе представление стека.
 * @return количество элементов в стеке.
 */
int count(struct Stack stack);
